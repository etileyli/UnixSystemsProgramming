POSIX: The Portable Operating System Interface

Developments in technology rely on communication, concurrency and asynchronous operation within software applications.

The programs in this book are based on the Single UNIX Specification, Version 3.
 n
Table A.1. Typical sections numbers for UNIX man pages.
section
contents
1 user commands
2 system calls
3 C library functions
4 devices and network interfaces
5 file formats
6 games and demos
7 environments, tables and troff macros
8 system maintenance

Concurrency can occur in a system
	with a single CPU,
	multiple CPUs sharing the same memory,
	or independent systems running over a network.

The context-switch time is the time it takes to switch from executing one process to another.

The quantum is roughly the amount of CPU time allocated to a process before it has to let another process run.

Section 1.4. Concurrency at the Applications Level

	1.4.1 Interrupts
	Operating-system routines called device drivers usually handle the interrupts generated by peripheral devices.

	Most machines have a device called a timer that can generate an interrupt after a specified interval of time.

	1.4.2 Signals
	A Signal is a software notification of an event. Often, a signal is a response of the operating system to an interrupt (a hardware event).

	A signal is generated when the event that causes the signal occurs. Signals can be generated either synchronously or asynchronously.

		* A signal is generated synchronously if it is generated by the process or thread that receives it. The execution of an illegal instruction or a divide-by-zero may generate a synchronous signal.
			(i.e. an error created during execution of a program)

		* A Ctrl-C on the keyboard generates an asynchronous signal.

	A process catches a signal when it executes a handler for the signal.

	1.4.3 I/O
	the process can avoid blocking by using asynchronous I/O or dedicated threads instead of ordinary blocking I/O

	1.4.4 Processes, threads and the sharing of resources
	A traditional method for achieving concurrent execution in UNIX is for the user to create multiple processes by calling the "fork" function.
		* fork, exec and wait

		* Processes that have a common ancestor can communicate through pipes

		* Processes without a common ancestor can communicate by
			signals
			FIFOs
			semaphores
			shared address space
			messages

		* Multiple threads of execution (i.e. thread) can provide concurrency within a process

		* If two distinct threads of execution share a resource within a time
		frame, care must be taken that these threads do not interfere with each other.

		* When a multi-threaded application has more than one thread of execution concurrently active on a multiprocessor system, multiple instructions from the same process
		may be executed at the same time.

	1.4.5 Multiple processors with shared memory

	1.4.6 The network as the computer

		* Concurrency and communication meet to form new applications.

		* The most widely used model of distributed computation is the client-server model.
			* Server processes that manages resources
			* Client processes that require access to shared resources
			* A process can both be a server and client

		* Examples of applications based on the client-server model include file transfer (ftp), electronic mail, file servers and the World Wide Web.

		* Development of client-server applications requires an understanding of concurrency and communication

		* The object-based model is another model for distributed computation.

		* Each resource in the system is viewed as an object with a message-handling interface, allowing all resources to be accessed in a uniform way.

		* Object frameworks define interactions between code modules,
		and the object model naturally expresses notions of protection.

		* An alternative to a truly distributed operating system is to provide application layers that run on top of common operating systems to exploit parallelism on the network.

		* The Parallel Virtual Machine (PVM) and its successor, Message Passing Interface (MPI), are software libraries that allow a collection of heterogeneous workstations to function as a parallel computer for solving large computational problems.


1.5 Security and Fault Tolerance
		* Often, programmers release resources such as buffers in the obvious places but forget to release them if an error occurs.

		* Most UNIX library functions indicate an error by a return value.

		* One of the most common bugs was the failure to check for a NULL return on functions that return pointers. If the code later uses the returned pointer, a CORE DUMP occurs.

1.6 Buffer Overflows for Breaking and Entering
	This section presents a simplified explanation of buffer overflows and how they might be used to attack a computer system.

	* In a typical system, the stack grows from high memory to low memory

	* When a function is called, the lower part of the stack contains the passed parameters and the return address. Higher up on the stack (lower memory addresses) are the local automatic variables.
 ...

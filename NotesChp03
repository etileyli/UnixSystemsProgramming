Chapter 3. Processes in UNIX

  3.1 Process Identification
    * UNIX identifies processes by a unique integral value called the process
      ID.

    * Each process also has a parent process ID, which is initially the process
    ID of the process that created it. If this parent process terminates, the
    process is adopted by a system process so that the parent process ID always
    identifies a valid process.

    * The "getpid" and "getppid" functions return the process ID and the parent
    process ID, respectively.

    * System administrators assign a unique integral user ID and an integral
    group ID to each user when creating the user's account. The system uses the
    user and group IDs to retrieve from the system database the privileges
    allowed for that user. The most privileged user, superuser or root, has a
    user ID of 0. The root user is usually the system administrator.

    * Real user ID, the real group ID, the effective user ID and the effective
    group ID.
      - gid_t getegid(void);
      - uid_t geteuid(void);
      - git_t getgid(void);
      - uid_t getuid(void);

  3.2 Process State
    * The state of a process indicates its status at a particular time. States:
      - new
      - ready
      - running
      - blocked
      - done

    * A process in the blocked state is waiting for an event and is not eligible
    to be picked for execution. More commonly, a process moves to the blocked
    state when it performs an I/O request.

    * A process performs I/O by requesting the service through a library
    function that is sometimes called a system call. During the execution of a
    system call, the operating system regains control of the processor and can
    move the process to the blocked state until the operation completes.

    * A context switch is the act of removing one process from the running state
    and replacing it with another.

    * The "process context" is the information that the operating systems needs
    about the process and its environment to restart it after a context switch.
      - the executable code
      - stack
      - registers
      - program counter
      - the memory used for static and dynamic variables
      &&
      - process state
      - the status of program I/O
      - user and process identification
      - privileges,
      - scheduling parameters
      - accounting information
      - memory management information
      &&
      - If a process is waiting for an event or has caught a signal
      - locks held by the process

  3.3 UNIX Process Creation and fork
    * A process can create a new process by calling fork. The calling process
    becomes the parent, and the created process is called the child.

    * The fork function copies the parent's memory image so that the new process
    receives a copy of the address space of the parent. Both processes continue
    at the instruction after the fork statement (executing in their respective
    memory images).

    * The fork function return value is the critical characteristic that allows
    the parent and the child to distinguish themselves and to execute different
    code. The fork function:
      - returns 0 to the child
      - returns the child's process ID to the parent

    * By default, the system buffers output written to stdout, so a particular
    message may not appear immediately after the printf returns. Messages to
    stderr are not buffered, but instead written immediately. For this reason,
    you should always use stderr for your debugging messages.

    * After fork, the child does not get locks that the parent holds. If the
    parent has set an alarm, the child is not notified when the parent's alarm
    expires. The child starts with no pending signals, even if the parent had
    signals pending at the time of the fork.

    * Although a child inherits its parent's process priority and scheduling
    attributes, it competes for processor time with other processes as a
    separate entity.

  3.4 The wait Function
    * The parent can execute wait or waitpid to block until the child finishes.

    * The wait function causes the caller to suspend execution until a child's
    status becomes available or until the caller receives a signal.

    * The waitpid function allows a parent to wait for a particular child.
    This function also allows a parent to check whether a child has terminated
    without blocking.

    * When a process terminates, but its parent does not wait for it, it becomes
    a zombie in UNIX terminology. Zombies stay in the system until they are
    waited for. If a parent terminates without waiting for a child, the child
    becomes an orphan and is adopted by a special system process. Traditionally,
    this process is called init and has process ID equal to 1, but POSIX does
    not require this designation.

  3.5 The exec Function
    * The fork function creates a copy of the calling process, but many
    applications require the child process to execute code that is different
    from that of the parent.

    * The exec family of functions provides a facility for overlaying the
    process image of the calling process with a new image.

    * The traditional way to use the fork–exec combination is for the child to
    execute (with an exec function) the new program while the parent continues
    to execute the original code.

    * The exec() family of functions replaces the current process image with a
    new process image. It loads the program into the current process space and
    runs it from the entry point.

    * Both parent and child processes are executed simultaneously in case of
    fork() while Control never returns to the original program unless there is
    an exec() error.

  3.6 Background Processes and Daemons
    * Most shells interpret a line ending with "&" as a command that should be
    executed by a background process.

    * When a shell creates a background process, it does not wait for the
    process to complete before issuing a prompt and accepting additional
    commands. Furthermore, a Ctrl-C from the keyboard does not terminate a
    background process.

    * A daemon is a background process that normally runs indefinitely. The UNIX
    operating system relies on many daemon processes to perform routine (and not
    so routine) tasks.

  3.7 Critical Sections
    * The problem is that the processes are "simultaneously" attempting to
    access a shared resource—a resource that should be used by only one process
    at a time.

    * The portion of code in which each process accesses such a shared resource
    is called a critical section. Programs with critical sections must be sure
    not to violate the "mutual exclusion" requirement.

    * Locking Mechanism: Each process acquires a lock that excludes all other
    processes before entering its critical section. When the process finishes
    the critical section, it releases the lock.

    * Printers are usually handled by having only one process (the printer
    daemon) with permissions to access the actual printer.

    * Tables and other information within the operating system kernel code are
    shared among processes managing the system. 









.

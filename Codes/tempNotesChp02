2.5 Function Return Values and Errors
  * Standard approaches to handling errors in UNIX programs include the following.
    * Print out an error message and exit the program (only in main).
    * Return –1 or NULL, and set an error indicator such as errno.
    * Return an error code

    * In general, functions should never exit on their own but should always report an error to the calling program.

	* Most library functions provide good models for implementing functions. Here are guidelines to follow

		1. Make use of return values to communicate information and to make error trapping easy for the calling program.

		2. Do not exit from functions. Instead, return an error value to allow the calling program flexibility in handling the error

		3. Make functions general but usable. (Sometimes these are conflicting goals.)

		4. Do not make unnecessary assumptions about sizes of buffers. (This is often hard to implement.)

		5. When it is necessary to use limits, use standard system-defined limits rather than arbitrary constants.

		6. Do not reinvent the wheel—use standard library functions when possible.

		7. Do not modify input parameter values unless it makes sense to do so.

		8. Do not use static variables or dynamic memory allocation if automatic allocation will do just as well.

		9. Analyze all the calls to the malloc family to make sure the program frees the memory that was allocated.

		10. Consider whether a function is ever called recursively or from a signal handler or from a thread. Functions
			with variables of static storage class may not behave in the desired way. (The error number can cause a big
			problem here.)

		11. Analyze the consequences of interruptions by signals.

		12. Carefully consider how the entire program terminates.

2.6 Argument Arrays

2.7 Thread-Safe Functions
  * The strtok function is not a model that you should emulate in your programs. Because of its definition (page 35), it must use
  an internal STATIC variable to keep track of the current location of the next token to parse within the string. However, when
  calls to strtok with different parse strings occur in the same program, the parsing of the respective strings may interfere because
  there is only one variable for the location.

  * The strtok_r function behaves similarly to strtok except for an additional parameter, lasts,
  a user-provided pointer to a location that strtok_r uses to store the starting address for the
  next parse.

  2.8 Use of Static Variables
    * While care must be taken in using static variables in situations with multiple threads, static
    variables are useful. For example, a static variable can hold internal state information between
    calls to a function.

    * The STATIC STORAGE CLASS is used to declare an identifier that is a local variable either to a
     function or a file and that exists and retains its value after control passes from where it was declared.
     This storage class has a duration that is permanent. A variable declared of this class retains its value
     from one call of the function to the next. THE SCOPE IS LOCAL. A variable is known only by the function it
     is declared within or if declared globally in a file, it is known or seen only by the functions within
     that file. This storage class guarantees that declaration of the variable also initializes the variable
     to zero or all bits off.

     * The EXTERN STORAGE CLASS is used to declare a global variable that will be known to the functions in a
     file and capable of being known to all functions in a program. This storage class has a duration that is
     permanent. Any variable of this class retains its value until changed by another assignment. The scope is
     global. A variable can be known or seen by all functions within a program.

     * https://stackoverflow.com/questions/3684450/what-is-the-difference-between-static-and-extern-in-c

    * bubblesort.c: The variable count has a "static storage class" because it is declared outside any block.
        - The static qualifier forces this variable to have internal linkage, guaranteeing that the count variable
        cannot be directly accessed by any function aside from bubblesort.c.

    * https://www.geeksforgeeks.org/internal-linkage-external-linkage-c/

    * Difference between linking library and adding include directories:
      https://stackoverflow.com/questions/7096152/c-difference-between-linking-library-and-adding-include-directories

    * Choose one file which will store the variable. Do not use static. The whole point of static is to keep the
    variable private and untouchable by other modules. In all other files, use the extern keyword to reference the
    variable: extern int i;

    * There is never a reason to access a static variable in another file.

    * Reasons to use Static functions and variables in C
      https://stackoverflow.com/questions/2973849/reasons-to-use-static-functions-and-variables-in-c

      I wonder about the use of the static keyword as scope limiting for variables in a file, in C.
      The standard way to build a C program as I see it is to:

      - have a bunch of c files defining functions and variables, possibly scope limited with static.
      - have a bunch of h files declaring the functions and possibly variables of the corresponding c file,
        for other c files to use. Private functions and variables are not published in the h file.
      - every c file is compiled separately to an o file.
      - all o files are linked together to an application file.

      I see two reasons for declaring a gobal as static, if the variable is not published in the h file anyway:

      - one is for readability. Inform future readers including myself that a variable is not accessed in any other file.
      - the second is to prevent another c file from redeclaring the variable as extern. I suppose that the linker
       would dislike a variable being both extern and static. (I dislike the idea of a file redeclaring a variable
       owned by someone else as extern, is it ok practice?)















.
